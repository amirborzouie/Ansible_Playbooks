- name: ----- show ansible_os_family -----
  debug:
        msg: "{{ansible_os_family}}"
  tags: ansible_os_family

- name: ----- set package_name -----
  set_fact:
        package_name: "httpd"
  when: ansible_os_family=="RedHat"
  tags: set_package_name

- name: ----- set package_name -----
  set_fact:
        package_name: "apache2"
  when: ansible_os_family=="Suse"
  tags: set_package_name

- name: ----- show package_name -----
  debug:
        msg: "{{package_name}}"
  tags: set_package_name

- name: ----- rpm query mariadb -----
  shell: rpm -qa | grep mariadb-server
  register: mariadb_rpm
  tags: check_mariadb_server

- name: ----- check is mariadb-server exists -----
  debug:
        msg: "mariadb-server exists"
  when: "'mariadb-server' in mariadb_rpm.stdout"
  tags: check_mariadb_server

- name: ----- package_facts mod -----
  package_facts:
        manager: auto
  tags: condition_2

- name: ----- check if nginx exists -----
  debug:
        var: ansible_facts.packages['nginx']
  tags: condition_2

- name: ----- Is nginx installed? -----
  debug:
        msg: "nginx is installed!"
  when: "'nginx' in ansible_facts.packages"
  tags: condition_2

- name: ----- prompt module -----
  pause:
        prompt: "The backup path is undefined! Please eneter the real one: "
  register: backup_path2
  when: backup_path is not defined
  tags: pause_mod

- name: ----- nginx installation -----
  yum:
        name: nginx
        state: present
  when:
        - ansible_distribution == "CentOS"
        - ansible_distribution_major_version == "7"
  tags: nginx_installation_condition

- name: ----- nginx enabled and started -----
  service:
        name: nginx
        state: started
        enabled: yes
  tags: nginx_service

- name: ----- check is nginx is installed -----
  shell: rpm -qa | grep nginx
  register: rpm_out
  tags: nginx_check

- name: ----- debug of above -----
  debug:
        msg: "nginx is installed"
  when: "'nginx' in rpm_out.stdout"
  tags: nginx_check

- name: ----- check if /home/dir1 exists -----
  stat:
        path: /home/dir1
  register: stat_out
  tags: stat_mod

- name: ----- debug of above -----
  debug:
        msg: "/home/dir1 exists"
  when: stat_out.stat.exists
  tags: stat_mod

- name: ----- cat /home/test1.txt -----
  shell: cat /root/test1.txt
  register: catty
  tags: condition_3

- name: ----- if /home/test1.txt contains the Ansible word -----
  debug:
        msg: "Ansible word exists"
  when: catty.stdout.find('Ansible') != -1
  tags: condition_3

- name: ----- if var1 or var2 is true -----
  shell: echo "var1"
  when: var1 or var2 | bool
  tags: cond_4

- name: ----- if var1 is false or not -----
  debug:
        msg: "var1 is false"
  when: not var1
  tags: cond_5

########## Exercise 29 ############

- name: ----- confirm dile deletion -----
  pause:
        prompt: "Are you sure to delete file?(yes/no)"
  register: confirm_delete
  tags: confirm_del

- name: ----- delete the file -----
  file:
        path: /root/test1.txt
        state: absent
  when: hostvars[play_hosts.0].confirm_delete.user_input | bool
  tags: confirm_del
